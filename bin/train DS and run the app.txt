Looking at the dataset you've provided, I notice a small formatting issue that needs to be fixed for the code to work properly. In the original code, I was using the column name "WeekNo", but in your actual data file, the column is just called "Week".

Let me help you fix this so the code works correctly with your data:

```python
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import joblib

# Step 1: Load and preprocess the data
def load_data(file_path):
    # Load data from file (assuming tab-separated format based on your data)
    df = pd.read_csv(file_path, sep='\t')
    
    # Convert date to datetime format
    df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
    
    # Create a year column to help with time-based predictions
    df['Year'] = df['Date'].dt.year - df['Date'].dt.year.min() + 1
    
    return df

# Step 2: Prepare features and target variables
def prepare_data(df):
    # Features will be: Week, Temperature, Humidity, LightLevel, Year, and initial measurements
    # For each vine, we'll create separate models
    
    # List of vine names for easier iteration
    vine_names = ['Vine1', 'Vine2', 'Vine3', 'Vine4']
    
    # Prepare features - FIXED: using "Week" instead of "WeekNo"
    features = ['Week', 'Temperature(C)', 'Humidity(%)', 'LightLevel(lux)', 'Year']
    
    # Dictionary to store models for each vine and measurement type
    models = {}
    
    for vine in vine_names:
        # Create models for length
        X = df[features]
        y_length = df[f'{vine}_Length(m)']
        
        # Split data
        X_train, X_test, y_train, y_test = train_test_split(X, y_length, test_size=0.2, random_state=42)
        
        # Train model for length
        model_length = RandomForestRegressor(n_estimators=100, random_state=42)
        model_length.fit(X_train, y_train)
        
        # Create models for leaves
        y_leaves = df[f'{vine}_Leaves']
        
        # Split data
        X_train, X_test, y_train, y_test = train_test_split(X, y_leaves, test_size=0.2, random_state=42)
        
        # Train model for leaves
        model_leaves = RandomForestRegressor(n_estimators=100, random_state=42)
        model_leaves.fit(X_train, y_train)
        
        # Store models
        models[f'{vine}_Length'] = model_length
        models[f'{vine}_Leaves'] = model_leaves
        
        # Evaluate models
        print(f"Model for {vine} Length:")
        y_pred = model_length.predict(X_test)
        print(f"R² Score: {r2_score(y_test, y_pred):.4f}")
        print(f"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred)):.4f}")
        
        print(f"Model for {vine} Leaves:")
        y_pred = model_leaves.predict(X_test)
        print(f"R² Score: {r2_score(y_test, y_pred):.4f}")
        print(f"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred)):.4f}")
        print("-" * 50)
    
    return models

# Step 3: Visualize growth trends
def visualize_growth(df):
    plt.figure(figsize=(12, 10))
    
    # Plot length growth over time - FIXED: using "Week" instead of "WeekNo"
    plt.subplot(2, 1, 1)
    plt.plot(df['Week'], df['Vine1_Length(m)'], label='Vine 1')
    plt.plot(df['Week'], df['Vine2_Length(m)'], label='Vine 2')
    plt.plot(df['Week'], df['Vine3_Length(m)'], label='Vine 3')
    plt.plot(df['Week'], df['Vine4_Length(m)'], label='Vine 4')
    plt.xlabel('Week Number')
    plt.ylabel('Length (m)')
    plt.title('Vanilla Vine Length Growth Over Time')
    plt.legend()
    
    # Plot leaves growth over time - FIXED: using "Week" instead of "WeekNo"
    plt.subplot(2, 1, 2)
    plt.plot(df['Week'], df['Vine1_Leaves'], label='Vine 1')
    plt.plot(df['Week'], df['Vine2_Leaves'], label='Vine 2')
    plt.plot(df['Week'], df['Vine3_Leaves'], label='Vine 3')
    plt.plot(df['Week'], df['Vine4_Leaves'], label='Vine 4')
    plt.xlabel('Week Number')
    plt.ylabel('Number of Leaves')
    plt.title('Vanilla Vine Leaves Growth Over Time')
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('vanilla_growth_trends.png')
    plt.close()

# Step 4: Create a function to predict future growth
def predict_future_growth(models, initial_week, initial_length, initial_leaves, 
                          target_week, temp=24.5, humidity=75.0, light=30000):
    # Calculate the number of years based on weeks (approximate)
    initial_year = initial_week // 52 + 1
    target_year = target_week // 52 + 1
    
    # Create a dataframe for the input features - FIXED: using "Week" instead of "WeekNo"
    input_df = pd.DataFrame({
        'Week': [target_week],
        'Temperature(C)': [temp],
        'Humidity(%)': [humidity],
        'LightLevel(lux)': [light],
        'Year': [target_year]
    })
    
    # Make predictions for each vine
    predictions = {}
    for vine in ['Vine1', 'Vine2', 'Vine3', 'Vine4']:
        # Predict length
        length_model = models[f'{vine}_Length']
        predicted_length = length_model.predict(input_df)[0]
        
        # Predict leaves
        leaves_model = models[f'{vine}_Leaves']
        predicted_leaves = leaves_model.predict(input_df)[0]
        
        # Store predictions
        predictions[f'{vine}_Length'] = predicted_length
        predictions[f'{vine}_Leaves'] = predicted_leaves
    
    return predictions

# Step 5: Save models for later use
def save_models(models, filename='vanilla_growth_models.pkl'):
    joblib.dump(models, filename)
    print(f"Models saved to {filename}")

# Step 6: Load saved models
def load_models(filename='vanilla_growth_models.pkl'):
    return joblib.load(filename)

# Step 7: Create a simple command-line application
def run_prediction_app():
    print("\n===== Vanilla Vine Growth Prediction Tool =====\n")
    
    # Load models
    try:
        models = load_models()
        print("Models loaded successfully.\n")
    except:
        print("Error loading models. Please run training first.")
        return
    
    # Get user input
    try:
        initial_week = int(input("Enter current week number (1-156): "))
        initial_length = float(input("Enter current vine length in meters: "))
        initial_leaves = int(input("Enter current number of leaves: "))
        target_week = int(input("Enter target week number to predict for: "))
        
        # Optional environmental factors
        print("\nEnter environmental factors (or press Enter for defaults):")
        temp_input = input("Average temperature in °C (default: 24.5): ")
        humidity_input = input("Average humidity in % (default: 75.0): ")
        light_input = input("Average light level in lux (default: 30000): ")
        
        temp = float(temp_input) if temp_input else 24.5
        humidity = float(humidity_input) if humidity_input else 75.0
        light = float(light_input) if light_input else 30000
        
        # Make prediction
        predictions = predict_future_growth(
            models, initial_week, initial_length, initial_leaves, 
            target_week, temp, humidity, light
        )
        
        # Display results
        print("\n===== Predicted Growth =====")
        print(f"From Week {initial_week} to Week {target_week}:\n")
        
        for vine in ['Vine1', 'Vine2', 'Vine3', 'Vine4']:
            print(f"{vine}:")
            print(f"  Predicted Length: {predictions[f'{vine}_Length']:.2f} meters")
            print(f"  Predicted Leaves: {int(round(predictions[f'{vine}_Leaves']))}")
            print()
            
        print("Note: These predictions are based on the patterns in your dataset.")
        print("Environmental factors and care practices may affect actual growth.")
        
    except ValueError:
        print("Error: Please enter valid numeric values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Main function to run the entire process
def main():
    print("Vanilla Vine Growth Prediction System")
    print("=====================================")
    
    # Step 1: Ask user for data file
    file_path = input("Enter the path to your data file (or press Enter for default 'vanilla_data.txt'): ")
    if not file_path:
        file_path = 'vanilla_data.txt'
    
    try:
        # Load and process data
        print(f"Loading data from {file_path}...")
        df = load_data(file_path)
        print(f"Loaded {len(df)} records.")
        
        # Visualize the data
        print("Generating growth trend visualization...")
        visualize_growth(df)
        print("Visualization saved as 'vanilla_growth_trends.png'")
        
        # Train models
        print("Training prediction models...")
        models = prepare_data(df)
        
        # Save models
        save_models(models)
        
        # Run the prediction application
        run_again = 'y'
        while run_again.lower() == 'y':
            run_prediction_app()
            run_again = input("\nMake another prediction? (y/n): ")
        
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()

```

```python
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
import os

# Title and description
st.title("Vanilla Vine Growth Predictor")
st.write("""
This application predicts how your vanilla vines will grow over time.
Enter your current measurements and see what to expect in the future!
""")

# Function to load or train models
@st.cache_resource
def get_models(data_file='vanilla_data.txt'):
    model_file = 'vanilla_growth_models.pkl'
    
    # Check if models exist
    if os.path.exists(model_file):
        return joblib.load(model_file)
    else:
        # Train new models if file doesn't exist
        st.info("Training models for the first time. This may take a moment...")
        # Load data
        df = pd.read_csv(data_file, sep='\t')
        df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
        df['Year'] = df['Date'].dt.year - df['Date'].dt.year.min() + 1
        
        # List of vine names for easier iteration
        vine_names = ['Vine1', 'Vine2', 'Vine3', 'Vine4']
        
        # Prepare features - FIXED: using "Week" instead of "WeekNo"
        features = ['Week', 'Temperature(C)', 'Humidity(%)', 'LightLevel(lux)', 'Year']
        
        # Dictionary to store models
        models = {}
        
        for vine in vine_names:
            # Create models for length
            X = df[features]
            y_length = df[f'{vine}_Length(m)']
            
            # Train model for length
            model_length = RandomForestRegressor(n_estimators=100, random_state=42)
            model_length.fit(X, y_length)
            
            # Create models for leaves
            y_leaves = df[f'{vine}_Leaves']
            
            # Train model for leaves
            model_leaves = RandomForestRegressor(n_estimators=100, random_state=42)
            model_leaves.fit(X, y_leaves)
            
            # Store models
            models[f'{vine}_Length'] = model_length
            models[f'{vine}_Leaves'] = model_leaves
        
        # Save models
        joblib.dump(models, model_file)
        return models

# Load or train models
try:
    models = get_models()
    st.success("Models loaded successfully!")
except Exception as e:
    st.error(f"Error loading models: {e}")
    st.stop()

# Sidebar for inputs
st.sidebar.header("Your Vine Measurements")
st.sidebar.markdown("Enter the current details of your vanilla vine:")

current_week = st.sidebar.number_input("Current Week Number", min_value=1, max_value=156, value=1)
current_length = st.sidebar.number_input("Current Vine Length (meters)", min_value=0.1, max_value=15.0, value=0.5, step=0.1)
current_leaves = st.sidebar.number_input("Current Number of Leaves", min_value=1, max_value=200, value=5)

st.sidebar.header("Target Prediction")
target_week = st.sidebar.slider("Predict for Week Number", min_value=current_week+1, max_value=156, value=min(current_week+52, 156))

st.sidebar.header("Environmental Factors (Optional)")
temperature = st.sidebar.slider("Average Temperature (°C)", min_value=20.0, max_value=30.0, value=24.5, step=0.1)
humidity = st.sidebar.slider("Average Humidity (%)", min_value=60.0, max_value=90.0, value=75.0, step=0.1)
light_level = st.sidebar.slider("Average Light Level (lux)", min_value=25000, max_value=35000, value=30000, step=100)

# Function to predict growth
def predict_growth(initial_week, target_week, temp, humidity, light):
    # Calculate the year based on weeks
    initial_year = initial_week // 52 + 1
    target_year = target_week // 52 + 1
    
    # Create input features - FIXED: using "Week" instead of "WeekNo"
    input_features = pd.DataFrame({
        'Week': [target_week],
        'Temperature(C)': [temp],
        'Humidity(%)': [humidity],
        'LightLevel(lux)': [light],
        'Year': [target_year]
    })
    
    # Make predictions for each vine
    predictions = {}
    for vine in ['Vine1', 'Vine2', 'Vine3', 'Vine4']:
        length_model = models[f'{vine}_Length']
        leaves_model = models[f'{vine}_Leaves']
        
        predicted_length = length_model.predict(input_features)[0]
        predicted_leaves = leaves_model.predict(input_features)[0]
        
        predictions[f'{vine}_Length'] = predicted_length
        predictions[f'{vine}_Leaves'] = int(round(predicted_leaves))
    
    return predictions

# Generate growth projection
if st.button("Generate Growth Projection"):
    # Make predictions
    predictions = predict_growth(current_week, target_week, temperature, humidity, light_level)
    
    # Display results
    st.header("Predicted Growth Results")
    
    # Show weeks and time span
    weeks_difference = target_week - current_week
    years_difference = weeks_difference / 52
    
    st.write(f"Projection from Week {current_week} to Week {target_week}")
    st.write(f"Time span: {weeks_difference} weeks ({years_difference:.1f} years)")
    
    # Create columns for display
    col1, col2 = st.columns(2)
    
    # Display the results in a table
    results_df = pd.DataFrame({
        'Vine': ['Vine 1', 'Vine 2', 'Vine 3', 'Vine 4'],
        'Predicted Length (m)': [
            predictions['Vine1_Length'],
            predictions['Vine2_Length'],
            predictions['Vine3_Length'],
            predictions['Vine4_Length']
        ],
        'Predicted Leaves': [
            predictions['Vine1_Leaves'],
            predictions['Vine2_Leaves'],
            predictions['Vine3_Leaves'],
            predictions['Vine4_Leaves']
        ]
    })
    
    with col1:
        st.dataframe(results_df)
    
    # Display a bar chart
    with col2:
        fig, ax = plt.subplots(figsize=(8, 5))
        
        # Plot lengths
        bar_positions = np.arange(4)
        bar_width = 0.35
        
        lengths = [
            predictions['Vine1_Length'],
            predictions['Vine2_Length'],
            predictions['Vine3_Length'],
            predictions['Vine4_Length']
        ]
        
        ax.bar(bar_positions, lengths, bar_width, label='Length (m)')
        
        # Add labels and title
        ax.set_xlabel('Vine')
        ax.set_ylabel('Predicted Length (m)')
        ax.set_title('Predicted Vine Length')
        ax.set_xticks(bar_positions)
        ax.set_xticklabels(['Vine 1', 'Vine 2', 'Vine 3', 'Vine 4'])
        
        st.pyplot(fig)
    
    # Growth comparison
    st.header("Growth Comparison")
    
    growth_df = pd.DataFrame({
        'Vine': ['Vine 1', 'Vine 2', 'Vine 3', 'Vine 4'],
        'Current Length (m)': [current_length, current_length, current_length, current_length],
        'Predicted Length (m)': [
            predictions['Vine1_Length'],
            predictions['Vine2_Length'],
            predictions['Vine3_Length'],
            predictions['Vine4_Length']
        ],
        'Current Leaves': [current_leaves, current_leaves, current_leaves, current_leaves],
        'Predicted Leaves': [
            predictions['Vine1_Leaves'],
            predictions['Vine2_Leaves'],
            predictions['Vine3_Leaves'],
            predictions['Vine4_Leaves']
        ]
    })
    
    growth_df['Length Growth (m)'] = growth_df['Predicted Length (m)'] - growth_df['Current Length (m)']
    growth_df['Leaves Growth'] = growth_df['Predicted Leaves'] - growth_df['Current Leaves']
    
    st.dataframe(growth_df)
    
    # Additional insights
    st.header("Growth Insights")
    
    avg_length_growth = growth_df['Length Growth (m)'].mean()
    avg_leaves_growth = growth_df['Leaves Growth'].mean()
    
    st.write(f"On average, your vanilla vines are predicted to grow {avg_length_growth:.2f} meters and add {int(avg_leaves_growth)} leaves over the selected time period.")
    
    growth_rate_per_week = avg_length_growth / weeks_difference
    leaves_rate_per_week = avg_leaves_growth / weeks_difference
    
    st.write(f"Weekly growth rate: {growth_rate_per_week:.3f} meters/week")
    st.write(f"Weekly leaves addition rate: {leaves_rate_per_week:.2f} leaves/week")
    
    # Recommendations based on predictions
    st.header("Recommendations")
    recommendations = [
        "Ensure adequate support structures as vines grow longer",
        f"Plan for approximately {int(avg_length_growth * 100)} cm of vertical growth space",
        "Monitor leaf health regularly as the plant develops new foliage",
        "Adjust fertilization schedule based on the predicted growth rate"
    ]
    
    for rec in recommendations:
        st.write(f"• {rec}")
        
    st.info("Note: These predictions are based on historical data patterns. Actual growth may vary based on care, environment, and vine genetics.")

```

## How to Use the Fixed Code with Your Data

Your data file format looks correct! The only issue was that in my original code, I was looking for a column named "WeekNo", but in your actual data file the column is named "Week". I've fixed that in both scripts now.

Here's how to use the code with your data file:

### Step 1: Save Your Data File
1. Save your vanilla_data.txt file in the same folder where you'll run the Python scripts
2. Make sure it's saved with tab separations (which your file already has)

### Step 2: Install Required Python Packages
Before running the code, you need to install several Python packages. Open your command prompt or terminal and run:

```
pip install pandas numpy scikit-learn matplotlib joblib
```

For the web application, you'll also need:
```
pip install streamlit
```

### Step 3: Save the Python Scripts
1. Save the first code as "vanilla_growth_prediction.py"
2. Save the second code as "vanilla_data_app.py"

### Step 4: Run the Command Line Version
1. Open your command prompt or terminal
2. Navigate to the folder where you saved the files
3. Type: `python vanilla_growth_prediction.py`
4. When prompted, press Enter to use the default filename (vanilla_data.txt)
5. Follow the on-screen instructions to make predictions

### Step 5: Run the Web Application (Optional)
1. In your command prompt or terminal, navigate to the folder with your files
2. Type: `streamlit run vanilla_data_app.py`
3. A browser window will open with the web application
4. Use the sliders and input fields to set your values, then click "Generate Growth Projection"

### Tips for Beginners
- Make sure all files (Python scripts and data file) are in the same folder
- If you get an error about missing modules, run the pip install commands above
- For the vanilla_data.txt file, don't change the column names or the tab separations
- The web application (Streamlit version) provides a more user-friendly interface

Let me know if you encounter any issues or have questions about how the code works!